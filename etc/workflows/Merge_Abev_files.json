{
  "name": "Merge Abev files",
  "nodes": [
    {
      "parameters": {
        "keys": {
          "key": [
            {
              "currentKey": "Kiindulo xml",
              "newKey": "sourceXml"
            },
            {
              "currentKey": "Valtozott xml",
              "newKey": "targetXml"
            }
          ]
        },
        "additionalOptions": {}
      },
      "id": "0ad67def-9b6a-4855-84cf-83dee3df11f6",
      "name": "Rename Keys",
      "type": "n8n-nodes-base.renameKeys",
      "typeVersion": 1,
      "position": [
        800,
        460
      ]
    },
    {
      "parameters": {
        "path": "a76c6dcd-2112-40db-afac-c2ae6643bc53",
        "formTitle": "Abev űrlap összefésülés",
        "formDescription": "Fel kell töltened egy XML fájlt, valamint egy vagy több további XML fájlt, amelyek változásokat tartalmaznak. Ez a munkafolyamat egyesíti az összes változást a forrás XML fájlba a további fájlokból.",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Kiindulo xml",
              "fieldType": "file",
              "multipleFiles": false,
              "acceptFileTypes": ".xml",
              "requiredField": true
            },
            {
              "fieldLabel": "Valtozott xml",
              "fieldType": "file",
              "acceptFileTypes": ".xml",
              "requiredField": true
            },
            {
              "fieldLabel": "Email",
              "fieldType": "email",
              "placeholder": "Email cim",
              "requiredField": true
            }
          ]
        },
        "options": {
          "respondWithOptions": {
            "values": {
              "formSubmittedText": "A kérésed benyújtásra került a munkafolyamatba."
            }
          }
        }
      },
      "id": "a0ec3255-c7d0-4305-9526-fa9fa32da59f",
      "name": "form",
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.1,
      "position": [
        540,
        460
      ],
      "webhookId": "f70780c7-ffc6-40d8-8521-7e7a3c35ff77"
    },
    {
      "parameters": {
        "fieldToSplitOut": "=binaries",
        "options": {
          "includeBinary": true
        }
      },
      "id": "7f89bfcd-d7da-4486-9ddb-67a2e9a8e613",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1320,
        460
      ]
    },
    {
      "parameters": {
        "operation": "xml",
        "binaryPropertyName": "={{ $json.binaries }}",
        "destinationKey": "=xml",
        "options": {
          "keepSource": "json"
        }
      },
      "id": "670c05cc-abf2-4bf9-8446-80ad073ab49d",
      "name": "Extract Start",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1580,
        460
      ]
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "1166e8be-70b9-415c-82e6-27456ad9472b",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2040,
        460
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Add a new field called 'myNewField' to the JSON of the item\n//$input.item.json.files = [];\nconst arr = [];\narr.push($input.item.json.sourceXml?.filename);\n\nconst files = $input.item.json.targetXml?.map(item => {\n    return item.filename;\n}).sort();\n\nconst filesOrdered =  [...arr, ...files];\n\nconst findElement = (binary) => (filename) => {\n  return Object.keys(binary).find((item) => {\n    const file = binary[item];\n    return file.fileName === filename;\n  })\n}\n\n\nconst result = filesOrdered.map(findElement($input.item.binary));\n\n$input.item.json.binaries = result;\n\nreturn $input.item;"
      },
      "id": "0a5fa499-97bb-483a-bdfe-cf8d64464d56",
      "name": "Extract binary object names",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        460
      ]
    },
    {
      "parameters": {
        "dataPropertyName": "xml",
        "options": {
          "mergeAttrs": false
        }
      },
      "id": "03781ea4-d291-4d76-8d4b-b7e3b0742a2c",
      "name": "Convert XML to JSON",
      "type": "n8n-nodes-base.xml",
      "typeVersion": 1,
      "position": [
        1820,
        460
      ]
    },
    {
      "parameters": {
        "mode": "jsonToxml",
        "options": {
          "attrkey": "$"
        }
      },
      "id": "8e9b7d3e-b6e7-4ddc-9e53-40ae2cb8dc59",
      "name": "XML",
      "type": "n8n-nodes-base.xml",
      "typeVersion": 1,
      "position": [
        2560,
        460
      ]
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "data",
        "options": {
          "fileName": "=merged-{{ $('form').item.json[\"Kiindulo xml\"].filename }}"
        }
      },
      "id": "bc42335c-cbb7-4b39-b4f2-66b437d4f033",
      "name": "Convert to File",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2880,
        460
      ]
    },
    {
      "parameters": {
        "operation": "compress",
        "fileName": "={{ $binary.data.fileName }}.zip"
      },
      "id": "a1d2250f-1985-4145-b847-06154f12f3f4",
      "name": "Compression",
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1.1,
      "position": [
        3180,
        460
      ]
    },
    {
      "parameters": {
        "fromEmail": "noreply@hr-group.hu",
        "toEmail": "={{ $('form').first().json.Email }}",
        "subject": "Abev XML összefésülés eredmények",
        "emailFormat": "text",
        "text": "A munkafolyamatod sikeresen feldolgozásra került, kérlek, keresd a csatolt a ZIP fájlt az e-mailben, amely tartalmazza az XML file-t.",
        "options": {
          "appendAttribution": false,
          "attachments": "=data"
        }
      },
      "id": "0d46a8ae-eaba-4fd6-879c-37194a18c8f0",
      "name": "Send Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        3460,
        460
      ],
      "credentials": {
        "smtp": {
          "id": "HvaFmlUrvL4Xz7Re",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// map the elements to only nyomtatvany info\n// flat the multi dimensional map\n// filter only items that has munkavallalo fields (ignore adozo elements)\n\nconst json = $input.item.json;\nconst datas = json.data;\n\n//drop first element\nconst items = datas.slice(1);\n\nconst uniqueId = (o) => {\n  if (o.nyomtatvanyinformacio?.munkavallalo?.adoazonosito) {\n    return o.nyomtatvanyinformacio.munkavallalo.adoazonosito;\n  }\n  \n  return o.nyomtatvanyinformacio?.adozo?.adoszam || null;\n}\n\n//take all other elements and flatten them into an array\nconst toreplace = items.map(item => {\n   return item.nyomtatvanyok.nyomtatvany;\n }).flat()\n   .reduce((acc,item) => {\n     const id = uniqueId(item)\n     acc[id] = item;\n     return acc;\n}, {});\n\n//replace elements\nconst data = datas[0];\nconst forms = data?.nyomtatvanyok?.nyomtatvany;\n\n//iterate over all elelemnts if the data element\n// and see if we find that element in the toreplace object\nif (forms) {\n\n  //process elements exists in the source document\n  const result =  forms.map(item => {\n    const id = uniqueId(item);\n    if (id && toreplace[id]) {\n      const o = toreplace[id];\n      const res = { ...o };\n      o.done = true;\n      return res;\n    } else {\n      return item;\n    }\n  });\n\n  const newItems = toreplace ? Object.entries(toreplace)\n          .filter(([key, value]) => value.done !== true).map(([key, value]) => value) : [];\n  \n    data.nyomtatvanyok.nyomtatvany = [...result, ...newItems];;\n}\n\nreturn data;"
      },
      "id": "5f8eaa63-a636-49ed-b7ff-31b8526d1dc8",
      "name": "Process elements",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2300,
        460
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Rename Keys": {
      "main": [
        [
          {
            "node": "Extract binary object names",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "form": {
      "main": [
        [
          {
            "node": "Rename Keys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Extract Start",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Start": {
      "main": [
        [
          {
            "node": "Convert XML to JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Process elements",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract binary object names": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert XML to JSON": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "XML": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Compression",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compression": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process elements": {
      "main": [
        [
          {
            "node": "XML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e1dca993-8167-4ba1-9ac4-91089864bc92",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7cfddeb6999f34b6da92291d1629f587d828f7bfb858bf018672cb83a32e762c"
  },
  "id": "Z9DwObcTIQ0aDCgf",
  "tags": []
}