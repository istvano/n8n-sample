{
  "createdAt": "2025-01-22T03:51:09.738Z",
  "updatedAt": "2025-05-16T06:59:11.585Z",
  "id": "BRBuCszQInz9hYba",
  "name": "Process A1",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "content": "## 3. Summarize the information\n\n",
        "height": 814,
        "width": 1060,
        "color": 7
      },
      "id": "f39815ac-597f-441d-8b34-9a48267681e7",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1580,
        -280
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "text",
              "renameField": true,
              "outputFieldName": "pages"
            }
          ]
        },
        "options": {}
      },
      "id": "ab54d959-50e1-4e5a-ab8f-e38bddffb067",
      "name": "Combine All Pages",
      "type": "n8n-nodes-base.aggregate",
      "position": [
        1720,
        -120
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {
          "temperature": 0,
          "topP": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        1000,
        100
      ],
      "id": "cf788cec-0e7d-442c-9a55-7b6116e7f49a",
      "name": "Azure OpenAI Chat Model",
      "credentials": {
        "azureOpenAiApi": {
          "id": "LlizztRRiyf4dLGh",
          "name": "Azure Open AI account Hrrent"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        2000,
        120
      ],
      "id": "e4b06fc0-cd81-479b-85db-ea24f45946fc",
      "name": "Azure OpenAI Chat Model1",
      "credentials": {
        "azureOpenAiApi": {
          "id": "LlizztRRiyf4dLGh",
          "name": "Azure Open AI account Hrrent"
        }
      }
    },
    {
      "parameters": {
        "content": "## 2. Extract Key Data Confidently From the pages\n",
        "height": 814,
        "width": 580,
        "color": 7
      },
      "id": "9c99845f-2cd7-4c24-be61-fb2c9706e618",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        940,
        -280
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 1. Turn the pdf into a series of images\n",
        "height": 814,
        "width": 1000,
        "color": 7
      },
      "id": "a2cc6298-e2d8-454f-b862-2530d36ab2eb",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -80,
        -280
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1920,
        -140
      ],
      "id": "230f5564-51ca-4d56-a1c7-f3aaeb050964",
      "name": "Workflow Input Trigger"
    },
    {
      "parameters": {
        "formTitle": "A1 Form Processing",
        "formFields": {
          "values": [
            {
              "fieldLabel": "File",
              "fieldType": "file"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -1920,
        140
      ],
      "id": "8d054ab8-e0e1-4570-ac47-7dec3c3e3d10",
      "name": "On form submission",
      "webhookId": "282a6ee7-baf4-4208-816f-895fb5cd0cea"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://pdfprocessor:8080/api/v1/general/split-pages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "={{$env['PDF_PROCESSOR_API_KEY']}}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "fileInput",
              "inputDataFieldName": "File"
            },
            {
              "name": "pageNumbers",
              "value": "all"
            },
            {
              "name": "dpi",
              "value": "300"
            }
          ]
        },
        "options": {}
      },
      "id": "8dd71e58-5879-4a49-95d0-4db0d2879ea4",
      "name": "Split PDF into pages",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -1360,
        -40
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {},
      "id": "885afa3c-8121-4bba-bf8d-f8bcf3e088f3",
      "name": "Extract Pages from Zip",
      "type": "n8n-nodes-base.compression",
      "position": [
        -1120,
        -40
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "/**\n * Removes diacritical marks (accents) from a string.\n * Uses Unicode normalization to decompose accented characters and then removes the diacritic marks.\n *\n * @param {string} str - The string from which to remove diacritics.\n * @returns {string} - The normalized string without diacritical marks.\n */\nfunction removeDiacritics(str) {\n  // Normalize to \"NFD\" (Normalization Form Decomposition) which separates the base character from its accents.\n  // Then, remove the combining diacritical marks (Unicode range \\u0300 - \\u036f).\n  return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n}\n\n/**\n * Searches for a search term within a given text, ignoring case and diacritics.\n *\n * @param {string} text - The text in which to search.\n * @param {string} searchTerm - The term to search for.\n * @returns {boolean} - True if the search term is found (ignoring case and diacritics); otherwise, false.\n */\nfunction containsIgnoreDiacritics(text, searchTerm) {\n  // Remove diacritics and convert both text and search term to lower case.\n  const normalizedText = removeDiacritics(text).toLowerCase();\n  const normalizedSearchTerm = removeDiacritics(searchTerm).toLowerCase();\n\n  // Check if the normalized text contains the normalized search term.\n  return normalizedText.includes(normalizedSearchTerm);\n}\n\n// Add a new field called 'myNewField' to the JSON of the item\nconst text = $input.item.json.data;\nconst proof = \"KÁRTYÁT HELYETTESÍTŐ\"\nconst signature = \"ZÁRADÉK\"\n$input.item.json.ignore = containsIgnoreDiacritics(text, proof) || containsIgnoreDiacritics(text, signature);\n\n\nreturn $input.item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        260,
        60
      ],
      "id": "b59d2308-cf83-479d-8fe4-828dc1b41ccc",
      "name": "Flag not needed pages"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ea43d8d3-4cfb-4559-aad1-c31bf716b7a7",
              "leftValue": "={{ $json.ignore }}",
              "rightValue": "AZ EURÓPAI EGÉSZSÉGBIZTOSÍTÁSI KÁRTYÁT HELYETTESÍTŐ",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {
          "ignoreCase": false
        }
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        260,
        340
      ],
      "id": "3e705314-7529-4549-b09c-31ef8d268f20",
      "name": "Remove Pages with metadata"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://pdfprocessor:8080/api/v1/convert/pdf/img",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "={{$env['PDF_PROCESSOR_API_KEY']}}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "fileInput",
              "inputDataFieldName": "data"
            },
            {
              "name": "imageFormat",
              "value": "png"
            },
            {
              "name": "singleOrMultiple",
              "value": "single"
            },
            {
              "name": "pageNumbers",
              "value": "all"
            },
            {
              "name": "dpi",
              "value": "200"
            }
          ]
        },
        "options": {}
      },
      "id": "c40478fe-202a-4f01-bcf0-9c8b75c994f8",
      "name": "Convet PDF to image",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        580,
        60
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "fileName"
            }
          ]
        },
        "options": {}
      },
      "id": "33258dc5-202d-483b-aa2e-67ba1b43a7c2",
      "name": "Sort Pages",
      "type": "n8n-nodes-base.sort",
      "position": [
        -660,
        -40
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "let results = [];\n\nfor (item of items) {\n    for (key of Object.keys(item.binary)) {\n        results.push({\n            json: {\n                fileName: item.binary[key].fileName\n            },\n            binary: {\n                data: item.binary[key],\n            }\n        });\n    }\n}\n\nreturn results;"
      },
      "id": "82f109ac-b132-4053-8af4-f06b30c80423",
      "name": "Create Pdf page list",
      "type": "n8n-nodes-base.code",
      "position": [
        -880,
        -40
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -660,
        320
      ],
      "id": "c1b2bc04-88a6-4556-8db8-713930b6bcf3",
      "name": "Loop Over PDFs"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "You are an advanced OCR model specialized in Hungarian text recognition (including diacritical marks such as á, é, í, ó, ö, ő, ú, ü, ű, Á, É, Í, Ó, Ö, Ő, Ú, Ü, Ű).\n\nThe image contains several text sections as well as a form with fields, each of which follows this pattern:\n\n1. A **field identifier**: a numeric value with one or two decimal point (for example, \"1.\", \"1.2\", \"1.3\", \"1.8.1\", \"2.2\", \"2.3\", \"5.1\").\n2. A **field label**: a string of text following the identifier (for example, \"Személyi azonosító szám\").\n3. A **field value**: a string that follows the field label.\n\nYour task is to extract every form field and output each on its own line in the following format:\n\n    <field identifier> <field label> : <value>\n\nFor example, if the OCR text contains:\n\n1.1 Személyi azonosító szám     045307106\n1.2 Családi név                              Doe\n1.3 Utónevek                                  John James\n1.4 Születési név (***)                  John James Doe\n1.5 Születési idő                            1999.01.02\n2.2 Kezdő nap                                2021.08.16\n2.3 Utolsó nap                                2023.08.15\n6.10 Dátum                                     2020.05.12\n\nThe output is\n\n1.1 Személyi azonosító szám: 045307106\n1.2 Családi név: Doe\n1.3 Utónevek: John James\n1.4 Születési név: John James Doe\n1.5 Születési idő: 1999.01.02\n2.2 Kezdő nap: 2021.08.16\n2.3 Utolsó nap: 2023.08.15\n6.10 Dátum: 2020.05.12\n\n**Important:**  \n- If you are uncertain about a field’s value, output `null` as the value instead of guessing.  \n- Do not modify or interpret the field value.  \n- Ignore any text in the OCR output that does not match the field pattern.",
        "messages": {
          "messageValues": [
            {
              "type": "HumanMessagePromptTemplate",
              "messageType": "imageBinary",
              "imageDetail": "high"
            }
          ]
        }
      },
      "id": "257e2fb4-2267-48c1-b397-35a382f35a4f",
      "name": "OCR PDF Page Image",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        1080,
        -120
      ],
      "typeVersion": 1.4
    },
    {
      "parameters": {
        "text": "= {{ $json.pages.join('---') }}",
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"array\",\n  \"items\": {\n\t\"type\": \"object\",\n\t\"properties\": {\n      \"familyName\": { \"type\": \"string\" },\n      \"firstName\": { \"type\": \"string\" },\n      \"birthName\": { \"type\": \"string\" },\n      \"birthDate\": { \"type\": \"string\" },\n      \"NInumber\": { \"type\": \"string\" },\n      \"memberCountry\": { \"type\": \"string\" },\n      \"startDay\": { \"type\": \"string\" },\n      \"lastDay\": { \"type\": \"string\" },\n      \"sendingCompanyName\": { \"type\": \"string\" },\n      \"employingCompanyName\": { \"type\": \"string\" },\n      \"employingCompanyCountry\": { \"type\": \"string\" },\n      \"issueDate\": { \"type\": \"string\" }\n\t}\n  }}",
        "options": {
          "systemPromptTemplate": "You are an form field extraction assistant. \nBelow is the final reconciled text from an A1 certificate. \nEach field in the text appears field id field name and value e.g.  \"1.1 Személyi azonosító szám: 138672490\". \nThe employing company field 5.1 or 5.2 might contain a long text with country and company name information.\n\nPlease:\n1. Identify each field by its numeric identifier \n2. Extract the following field label and the value.\n\n1.1 Személyi azonosító szám \n1.2 Családi név \n1.3 Utónév \n1.4 Születési név \n1.5 Születési dátum\n\n2.1 Tagállam\n2.2 Kezdő nap\n2.3 Utolsó nap\n\n4.3 sendingCompanyName\n5.1 or 5.2 employing company: separate the company name and country\n\n6.10 dátum ( date when the form was issued)\n\n**Important:**\n- Do not modify or translate the field value.\n- If you are uncertain about a field’s value, output `null` as the value instead of guessing.\n\nFor country fields, convert the name into its corresponding ISO 3166-1 alpha-3 code (e.g., 'Austria' -> 'AUT', 'Germany' -> 'DEU', 'Hungary' -> 'HUN')."
        }
      },
      "id": "cdadc1a9-1656-40dd-a9dc-03ea86bb57bf",
      "name": "Extract All Data into JSON",
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "position": [
        1960,
        -120
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://pdfprocessor:8080/api/v1/misc/ocr-pdf",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "={{$env['PDF_PROCESSOR_API_KEY']}}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "fileInput",
              "inputDataFieldName": "data"
            },
            {
              "name": "languages",
              "value": "hun"
            },
            {
              "name": "ocrType",
              "value": "    force-ocr"
            },
            {
              "name": "ocrRenderType",
              "value": "hocr"
            }
          ]
        },
        "options": {}
      },
      "id": "8dad7b95-bb77-492d-abdb-8cf4bf707115",
      "name": "Legacy OCR PDF page",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -320,
        520
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://pdfprocessor:8080/api/v1/convert/pdf/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "={{$env['PDF_PROCESSOR_API_KEY']}}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "fileInput",
              "inputDataFieldName": "data"
            },
            {
              "name": "outputFormat",
              "value": "txt"
            }
          ]
        },
        "options": {}
      },
      "id": "d491bf6a-2f99-404b-b152-c15acd7853cd",
      "name": "Extract Text from OCRed PDF page",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -320,
        740
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        40,
        60
      ],
      "id": "f76098a1-9ca7-4030-b7e7-be85ad6f44c0",
      "name": "Merge OCR text with original Binary"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// This function processes a single page (array) and returns an object\n// with the new text (trimmed from the earliest token occurrence if threshold met)\n// and a boolean indicating whether the threshold was met.\nfunction processPage(text, page) {\n  let count = 0;\n  let earliestIndex = text.length;\n\n  for (const token of page) {\n    const index = text.indexOf(token);\n    if (index !== -1) {\n      count++;\n      if (index < earliestIndex) {\n        earliestIndex = index;\n      }\n    }\n  }\n\n  const thresholdMet = count > (page.length / 2);\n  return {\n    newText: thresholdMet ? text.substring(earliestIndex) : text,\n    thresholdMet: thresholdMet\n  };\n}\n\nfunction processTextWithPages(text, pages) {\n  for (const page of pages) {\n    const result = processPage(text, page);\n    if (result.thresholdMet) {\n      return result;\n    }\n  }\n  return {\n    newText: text,\n    thresholdMet: false\n  };\n}\n\nconst firstPage = [ \"1.1\", \"1.2\", \"1.3\", \"1.4\", \"1.5\", \"1.6\", \"1.7\", \"1.8\", \"1.8.1\", \"1.8.2\",\"1.8.3\",\"1.8.4\",\"1.9\", \"1.9.1\", \"1.9.2\",\"1.9.3\",\"1.9.4\", \"2.1\", \"2.2\", \"2.3\", \"2.4\", \"2.5\", \"2.6\"];\nconst secondPage = [\"3.1\", \"3.2\", \"3.3\", \"3.4\", \"3.5\", \"3.6\", \"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11\", \"3.12\", \"4.1.1\", \"4.1.2\",\"4.2\", \"4.3\", \"4.4\", \"4.4.1\", \"4.4.2\", \"4.4.3\", \"4.4.4\", \"5.1\"];\nconst thirdPage = [\"5.2\", \"5.3\", \"6.1\", \"6.2\", \"6.3\", \"6.4\", \"6.5\", \"6.6\", \"6.7\", \"6.8\", \"6.9\", \"6.10\", \"6.11\" ];\n\nconst pages = [firstPage, secondPage, thirdPage];\nconst result = processTextWithPages($input.item.json.data, pages);\n\nreturn {\n  fileName: $input.item.json.fileName,\n  data: result.newText\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        340
      ],
      "id": "100879eb-33b3-4724-9016-5c9a6e052b3b",
      "name": "Remove Noise"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "data",
              "renameField": true,
              "outputFieldName": "pages"
            }
          ]
        },
        "options": {}
      },
      "id": "6fe56749-cc3f-4f69-bc5f-36b15e0a37af",
      "name": "Combine OCR Pages",
      "type": "n8n-nodes-base.aggregate",
      "position": [
        740,
        340
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {
          "temperature": 0,
          "topP": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        1040,
        420
      ],
      "id": "80994fc0-cf29-4776-af30-8d73a96a24dd",
      "name": "Azure OpenAI Chat Model2",
      "credentials": {
        "azureOpenAiApi": {
          "id": "LlizztRRiyf4dLGh",
          "name": "Azure Open AI account Hrrent"
        }
      }
    },
    {
      "parameters": {
        "text": "= {{ $json.pages.join('---') }}",
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"array\",\n  \"items\": {\n\t\"type\": \"object\",\n\t\"properties\": {\n      \"familyName\": { \"type\": \"string\" },\n      \"firstName\": { \"type\": \"string\" },\n      \"birthName\": { \"type\": \"string\" },\n      \"birthDate\": { \"type\": \"string\" },\n      \"NInumber\": { \"type\": \"string\" },\n      \"memberCountry\": { \"type\": \"string\" },\n      \"startDay\": { \"type\": \"string\" },\n      \"lastDay\": { \"type\": \"string\" },\n      \"sendingCompanyName\": { \"type\": \"string\" },\n      \"employingCompanyName\": { \"type\": \"string\" },\n      \"employingCompanyCountry\": { \"type\": \"string\" },\n      \"issueDate\": { \"type\": \"string\" }\n\t}\n  }}",
        "options": {
          "systemPromptTemplate": "You are a form field extraction assistant. \nBelow is the final reconciled text from an A1 certificate. \n\nEach field in the text appears like  field number field name field value e.g. \n\n1.1 Személyi azonosító szám: 12345678\n\nThe potential field numbers are the following:\n\n\"1.1\", \"1.2\", \"1.3\", \"1.4\", \"1.5\", \"1.6\", \"1.7\", \"1.8\", \"1.8.1\", \"1.8.2\",\"1.8.3\",\"1.8.4\",\"1.9\", \"1.9.1\", \"1.9.2\",\"1.9.3\",\"1.9.4\", \"2.1\", \"2.2\", \"2.3\", \"2.4\", \"2.5\", \"2.6\"\n\"3.1\", \"3.2\", \"3.3\", \"3.4\", \"3.5\", \"3.6\", \"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11\", \"3.12\", \"4.1.1\", \"4.1.2\",\"4.2\", \"4.3\", \"4.4\", \"4.4.1\", \"4.4.2\", \"4.4.3\", \"4.4.4\", \"5.1\"\n\"5.2\", \"5.3\", \"6.1\", \"6.2\", \"6.3\", \"6.4\", \"6.5\", \"6.6\", \"6.7\", \"6.8\", \"6.9\", \"6.10\", \"6.11\" \n\nTask:\n1. Identify each field by its numeric identifier \n2. Extract the following field label and the value.\n\n1.1 Személyi azonosító szám \n1.2 Családi név \n1.3 Utónév \n1.4 Születési név \n1.5 Születési dátum\n\n2.1 Tagállam\n2.2 Kezdő nap\n2.3 Utolsó nap\n\n4.3 sendingCompanyName\n5.1 or 5.2 employing company: separate the company name and country\n\n6.10 dátum ( date when the form was issued)\n\n**Important:**  \n- Do not modify or translate the field value.  \n- If you are uncertain about a field’s value, output `null` as the value instead of guessing.  \n\nFor country fields, convert the name into its corresponding ISO 3166-1 alpha-3 code (e.g., 'Austria' -> 'AUT', 'Germany' -> 'DEU', 'Hungary' -> 'HUN')."
        }
      },
      "id": "00487a46-a964-4553-aa54-98f6be3fd2c5",
      "name": "Extract Form values from OCR",
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "position": [
        1160,
        260
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2740,
        240
      ],
      "id": "da574c57-be1e-417c-a5ad-11fde6d9429c",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "return $input.first().json?.output || {}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2420,
        20
      ],
      "id": "9bce2f0c-1699-4d9c-8c45-5e2418e59e6a",
      "name": "Extract AI Output "
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function removeTrailingDot(string) {\n  return string.replace(/\\.$/, '');\n}\n\nfunction compareFieldsWithOCR(obj) {\n  const diffResult = {};\n\n  // Loop through each key in the object\n  Object.keys(obj).forEach(key => {\n    // Only process non-OCR keys\n    if (!key.startsWith(\"OCR\")) {\n      const ocrKey = \"OCR\" + key; // Build corresponding OCR key\n\n      if (ocrKey in obj) {\n        const originalVal = obj[key];\n        const ocrVal = obj[ocrKey];\n\n        // Only compare if OCR value is not an empty string or the string \"null\"\n        if (ocrVal !== \"\" && ocrVal !== \"null\") {\n          // Compare the original and OCR values\n          diffResult[key + \"Diff\"] = (removeTrailingDot(originalVal) === removeTrailingDot(ocrVal)) ? \"equivalent\" : \"different\";\n        }\n      }\n    }\n  });\n\n  return diffResult;\n}\n\nconst input = $input.item.json;\nconst diff = compareFieldsWithOCR(input);\n\nreturn {\n  ...input,\n  ...diff\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2980,
        240
      ],
      "id": "eb7aac3a-02cc-4a09-ba46-bbe238ec330b",
      "name": "Create Summary"
    },
    {
      "parameters": {
        "jsCode": "function addPrefixToProperties(obj, prefix = 'OCR') {\n  const result = {};\n  Object.keys(obj).forEach(key => {\n    result[prefix + key] = obj[key];\n  });\n  return result;\n}\n\nreturn addPrefixToProperties($input.first()?.json?.output?.[0] || {});\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2040,
        360
      ],
      "id": "b0ca30fc-057d-4e05-b3a6-59ca96cd607f",
      "name": "Prefix result"
    }
  ],
  "connections": {
    "Combine All Pages": {
      "main": [
        [
          {
            "node": "Extract All Data into JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Azure OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "OCR PDF Page Image",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Azure OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Extract All Data into JSON",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Workflow Input Trigger": {
      "main": [
        [
          {
            "node": "Split PDF into pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Split PDF into pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split PDF into pages": {
      "main": [
        [
          {
            "node": "Extract Pages from Zip",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Pages from Zip": {
      "main": [
        [
          {
            "node": "Create Pdf page list",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Flag not needed pages": {
      "main": [
        [
          {
            "node": "Remove Pages with metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Pages with metadata": {
      "main": [
        [
          {
            "node": "Convet PDF to image",
            "type": "main",
            "index": 0
          },
          {
            "node": "Remove Noise",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convet PDF to image": {
      "main": [
        [
          {
            "node": "OCR PDF Page Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort Pages": {
      "main": [
        [
          {
            "node": "Loop Over PDFs",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge OCR text with original Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Pdf page list": {
      "main": [
        [
          {
            "node": "Sort Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over PDFs": {
      "main": [
        [
          {
            "node": "Merge OCR text with original Binary",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Legacy OCR PDF page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OCR PDF Page Image": {
      "main": [
        [
          {
            "node": "Combine All Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract All Data into JSON": {
      "main": [
        [
          {
            "node": "Extract AI Output ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Legacy OCR PDF page": {
      "main": [
        [
          {
            "node": "Extract Text from OCRed PDF page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Text from OCRed PDF page": {
      "main": [
        [
          {
            "node": "Loop Over PDFs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge OCR text with original Binary": {
      "main": [
        [
          {
            "node": "Flag not needed pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Noise": {
      "main": [
        [
          {
            "node": "Combine OCR Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine OCR Pages": {
      "main": [
        [
          {
            "node": "Extract Form values from OCR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Azure OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Extract Form values from OCR",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Extract Form values from OCR": {
      "main": [
        [
          {
            "node": "Prefix result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract AI Output ": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Create Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prefix result": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "28507d15-6f85-43f5-960f-c8018ef0a734",
  "triggerCount": 0,
  "tags": [],
  "shared": [
    {
      "createdAt": "2025-04-02T12:39:45.945Z",
      "updatedAt": "2025-04-02T12:39:45.945Z",
      "role": "workflow:owner",
      "workflowId": "BRBuCszQInz9hYba",
      "projectId": "8CGNWCigao1I4jrt",
      "project": {
        "createdAt": "2025-04-02T11:57:30.751Z",
        "updatedAt": "2025-04-02T12:39:24.926Z",
        "id": "8CGNWCigao1I4jrt",
        "name": "istvano orbani <admin@localhost.com>",
        "type": "personal",
        "icon": null,
        "description": null
      }
    }
  ]
}