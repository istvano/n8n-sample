{
  "name": "Compare Abev files",
  "nodes": [
    {
      "parameters": {
        "dataPropertyName": "source",
        "options": {}
      },
      "id": "1ccb66db-4707-4dc4-ad9d-93fda6b68f91",
      "name": "Convert XML to JSON",
      "type": "n8n-nodes-base.xml",
      "typeVersion": 1,
      "position": [
        -2100,
        700
      ]
    },
    {
      "parameters": {
        "path": "=/ftp/n8n/mdf.csv",
        "binaryPropertyName": "mapping"
      },
      "id": "f98295af-c9fe-43a9-8ea8-a1ff76bdef5a",
      "name": "FTP Download Mapping",
      "type": "n8n-nodes-base.ftp",
      "typeVersion": 1,
      "position": [
        -1280,
        880
      ],
      "executeOnce": false,
      "credentials": {
        "ftp": {
          "id": "7PImtGjLamyo8mU7",
          "name": "FTP account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const elements = $input.all();\n\nconst result = elements\n.reduce((acc, elm) => {\n  const json = elm.json;\n  acc[json.EAzon] = elm.json;  \n  return acc;\n}, {})\n\nreturn {\n  mapping: result\n}"
      },
      "id": "dc5a7c09-ef18-4322-8638-0125d04986c0",
      "name": "Normalize Mappings",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -840,
        880
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Add a new field called 'myNewField' to the JSON of the item\nconst forms = $input.item.json.forms;\nconst mapping = $input.item.json.mapping;\n\n//is this a number or can be parsed into a number?\nfunction isNumber(value) {\n  return !isNaN(parseFloat(value));\n}\n\nconst isObjectEmpty = (obj) => {\n  return (!obj) || Object.keys(obj).length === 0\n}\n\nfunction diffNumbers(str1, str2) {\n    // Convert the inputs to numbers, treating empty or null values as 0\n    const num1 = str1 ? parseFloat(str1) || 0 : 0;\n    const num2 = str2 ? parseFloat(str2) || 0 : 0;\n\n    // Calculate and return the difference\n    return num1 - num2;\n}\n\nfunction diffStrings(str1, str2) {\n    let diff = {\n        added: '',\n        removed: '',\n        same: ''\n    };\n\n    const maxLength = Math.max(str1.length, str2.length);\n\n    for (let i = 0; i < maxLength; i++) {\n        const char1 = str1[i] || '';\n        const char2 = str2[i] || '';\n\n        if (char1 === char2) {\n            diff.same += char1;\n        } else {\n            if (char1) diff.removed += char1;\n            if (char2) diff.added += char2;\n        }\n    }\n\n    return JSON.stringify(diff);\n}\n\n\n\n// take a single field from source and target and see if they are the same\nconst diffField = (source, target) => (field) => {\n  const sValue = source && source[field]?source[field]:'';\n  const tValue = target && target[field]?target[field]:'';\n  \n  return {\n    field: field,\n    equals: sValue === tValue,\n    value: sValue,\n    newValue: tValue,\n    diff: isNumber(sValue) || isNumber(tValue) ? diffNumbers(tValue, sValue) : diffStrings(sValue, tValue)\n  }  \n}\n\nconst diffForm = (mapping) => (form) => {\n\n  const vFields = form.value?.mezok?.mezo;\n  const cFields = form.changedTo?.mezok?.mezo;\n\n  const vKeys = (vFields)?Object.keys(vFields):[];\n  const cKeys = (cFields)?Object.keys(cFields):[];\n  \n  const keys = [...new Set([...vKeys, ...cKeys])];\n  \n  const comparator = diffField(vFields, cFields);\n  \n  const result = keys.map(comparator).reduce((acc,obj) => {\n    const fieldMap = mapping[obj.field];\n\n    if (!obj.equals) {\n      const ignore = fieldMap && fieldMap.Kihagyva && fieldMap.Kihagyva.includes('T');\n\n      if (!ignore) {\n        acc[obj.field] = {\n          equals: obj.equals,\n          value: obj.value,\n          newValue: obj.newValue,\n          diff: obj.diff,\n          name: fieldMap?.Megnevezes ? fieldMap?.Megnevezes : fieldMap?.Adoazon\n        };      \n      }\n    }  \n\n    return acc;\n  }, {});\n\n  form.diff = result;\n  if (isObjectEmpty(result)) {\n    form.action = 'V'\n  }\n  \n  return form;  \n}\n  \nconst diff = forms.map(diffForm(mapping));\ndelete $input.item.json.mapping;\n\nreturn $input.item;"
      },
      "id": "8d308b36-a292-4813-ab83-8b1beb30a938",
      "name": "Generate diff",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -280,
        480
      ]
    },
    {
      "parameters": {
        "jsCode": "// Add a new field called 'myNewField' to the JSON of the item\n\nconst elm = $input.first();\n\nconst metadata = {\n  sourceFile: elm.json.sourceXml?.filename,\n  targetFile: elm.json.targetXml?.filename\n}\n\n\nconst result = elm.json.forms.map((item) => {\n  const val = item.changedTo ? item.changedTo : item.value;\n  let csvItem = {\n    kiindulo: metadata.sourceFile,\n    valtozasok: metadata.targetFile,\n    akcio: item.action,\n    tipus: item.type,\n    id: item.id,    \n    adozo_adoszam: val?.nyomtatvanyinformacio?.adozo?.adoszam,\n    munkavallalo_adoszam: val?.nyomtatvanyinformacio?.munkavallalo?.adoazonosito\n  };\n\n  csvItem.diff = item.diff;\n  \n  return csvItem;\n});\n\nreturn result;\n"
      },
      "id": "09d464da-c05c-43d3-9fb1-5f212523a4db",
      "name": "Convert to CSV structure",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40,
        480
      ]
    },
    {
      "parameters": {
        "options": {
          "fileName": "={{ $json.kiindulo }} _{{ $json.valtozasok }}-alkalmazo.csv"
        }
      },
      "id": "6b6c7aeb-be7a-4e8f-85e3-2ed2535ba22d",
      "name": "Convert to File",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        800,
        220
      ]
    },
    {
      "parameters": {
        "options": {
          "fileName": "={{ $json.kiindulo }} _{{ $json.valtozasok }}-alkalmazott.csv"
        }
      },
      "id": "a681b0f2-901d-45b6-9bd1-ab154ffccc3d",
      "name": "Convert to File Dolg",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        800,
        480
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "03668bf9-19da-4682-a562-90dbcb347e89",
              "leftValue": "={{ $json.akcio }}",
              "rightValue": "M",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "29372dd5-c6dd-4d1f-8909-8f3c9ba44e34",
              "leftValue": "={{ $json.akcio }}",
              "rightValue": "T",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "c942acc5-738c-46ee-a8ab-bbf6a12632d5",
              "leftValue": "={{ $json.akcio }}",
              "rightValue": "U",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "id": "d709f4dd-37c4-44a5-881a-0372e5b9fe45",
      "name": "Filter Changes",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.1,
      "position": [
        600,
        880
      ]
    },
    {
      "parameters": {
        "options": {
          "fileName": "={{ $json.kiindulo }} _{{ $json.valtozasok }}-alkalmazott-modositott.csv"
        }
      },
      "id": "b03cb4f3-e3df-4cce-9c50-7255abfa061b",
      "name": "Convert to File Dolg Chnages",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        820,
        880
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "03668bf9-19da-4682-a562-90dbcb347e89",
              "leftValue": "={{ $json.akcio }}",
              "rightValue": "V",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "id": "fd3ecaff-27ec-49d0-8be7-7c5fc9074d3a",
      "name": "Filter No Changes",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.1,
      "position": [
        600,
        1080
      ]
    },
    {
      "parameters": {
        "options": {
          "fileName": "={{ $json.kiindulo }} _{{ $json.valtozasok }}-alkalmazott-valtozatlan.csv"
        }
      },
      "id": "ec8972e1-8978-46c1-bf3a-c7f22d8f0f10",
      "name": "Convert to File Dolg No Chnages",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        820,
        1080
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "eab53771-1203-48cc-b7e6-af6c44cf4a12",
              "leftValue": "={{ $json.tipus }}",
              "rightValue": "Alkalmazo",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "71f258f7-265b-4376-8aeb-fb74730c632c",
      "name": "Only Employer Data",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.1,
      "position": [
        360,
        220
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Add a new field called 'myNewField' to the JSON of the item\n\nconst elm = $input.item.json;\n\nconst fields = Object.keys(elm.diff);\n\nconst diff = fields.reduce((acc,field) => {\n    const val = elm.diff[field];\n    acc[field+\"_megnevezes\"] = val?.name;\n    acc[field+\"_eredeti\"] = val?.value;\n    acc[field+\"_modositott\"] = val?.newValue;\n    acc[field+\"_kulonbseg\"] = val?.diff;\n    return acc;\n}, {});  \n\ndelete elm.diff;\n\nreturn { ...elm, ...diff };\n"
      },
      "id": "d7fa9be3-9642-4b8c-8ec7-345a95f7915f",
      "name": "Convert DIFF to CSV structure",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        580,
        220
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "eab53771-1203-48cc-b7e6-af6c44cf4a12",
              "leftValue": "={{ $json.tipus }}",
              "rightValue": "Alkalmazott",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "9693d938-be5c-4bf8-9f54-a6b338003d88",
      "name": "Only Employee",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.1,
      "position": [
        360,
        480
      ]
    },
    {
      "parameters": {
        "jsCode": "// Add a new field called 'myNewField' to the JSON of the item\n\nconst items = $input.all();\n\nconst fields = items.reduce((acc, item) => {\n  Object.keys(item.json.diff).forEach(key => acc.add(key));\n  return acc;\n}, new Set());\n\nconst fieldArray = Array.from(fields);\n\nconst result = items.map(item => {\n\n  const diff = fieldArray.reduce((acc,field) => {\n      const val = item.json.diff[field];      \n      acc[field+\"_megnevezes\"] = val?.name;\n      acc[field+\"_eredeti\"] = val?.value ? val?.value : '';\n      acc[field+\"_modositott\"] = val?.newValue ? val?.newValue : '';\n      acc[field+\"_kulonbseg\"] = val?.diff ? val?.diff : '';\n      return acc;\n  }, {});\n  \n  delete item.json.diff;\n  return {\n    ...item.json, ...diff\n  };\n});\n\nreturn result;"
      },
      "id": "c3693826-c161-46ca-a447-bb523892beda",
      "name": "Convert DIFF to CSV structure1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        580,
        480
      ]
    },
    {
      "parameters": {
        "operation": "compress",
        "binaryPropertyName": "={{ $json.binaryKeys }}",
        "fileName": "={{ $json[\"fileName\"] }}.zip"
      },
      "id": "ce648f07-d636-4c2f-9ee8-d9b187b6f177",
      "name": "Compression",
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1.1,
      "position": [
        1860,
        680
      ]
    },
    {
      "parameters": {
        "jsCode": "let binaries = {}, binary_keys = [], fileName = 'data';\n\nfor([index, item] of items.entries()) {\n    binaries[`data_${index}`] = item.binary.data;\n    binary_keys.push(`data_${index}`);\n    fileName = item.binary.data.fileName;\n}\n\nlet lastXmlIndex = fileName.lastIndexOf('.xml');\n\n// Slice the string up to the end of the last \".xml\"\nif (lastXmlIndex !== -1) {\n    fileName = fileName.slice(0, lastXmlIndex + 4); // +4 to include \".xml\"\n}\n\nreturn [{\n    json: {\n        binaryKeys: binary_keys.join(','),\n        fileName: fileName\n    },\n    binary: binaries\n}];"
      },
      "id": "6cfb01b7-f7e7-400b-9d6e-ec3012af5b2f",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        680
      ]
    },
    {
      "parameters": {
        "numberInputs": 4
      },
      "id": "dc3c89c3-269c-4b07-8c2e-43b9dd04c8f0",
      "name": "Merge Result to single stream",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1280,
        660
      ]
    },
    {
      "parameters": {
        "fromEmail": "noreply@hr-group.hu",
        "toEmail": "={{ $('form').first().json.Email }}",
        "subject": "Abev workflow eredmenyek",
        "emailFormat": "text",
        "text": "A munkafolyamatod sikeresen feldolgozásra került, kérlek, keresd a csatolt a ZIP fájlt az e-mailben, amely tartalmazza az eredményeket.",
        "options": {
          "appendAttribution": false,
          "attachments": "=data"
        }
      },
      "id": "12c637df-c9ff-4736-b791-c516809e318b",
      "name": "Send Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        2120,
        680
      ],
      "credentials": {
        "smtp": {
          "id": "HvaFmlUrvL4Xz7Re",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "binaryPropertyName": "mapping",
        "options": {}
      },
      "id": "852fd068-b178-482a-94fd-ee4b8953b6de",
      "name": "Extract from Mapping.csv",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -1060,
        880
      ]
    },
    {
      "parameters": {
        "dataPropertyName": "target",
        "options": {}
      },
      "id": "3d46d7c3-5af6-4f6e-81bb-bc35305ae40a",
      "name": "Convert XML to JSON1",
      "type": "n8n-nodes-base.xml",
      "typeVersion": 1,
      "position": [
        -2100,
        940
      ]
    },
    {
      "parameters": {
        "operation": "xml",
        "binaryPropertyName": "Kiindulo_xml",
        "destinationKey": "source",
        "options": {}
      },
      "id": "37edb636-0a0b-44bf-94fa-34667681a2c2",
      "name": "Extract Start",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -2280,
        700
      ]
    },
    {
      "parameters": {
        "operation": "xml",
        "binaryPropertyName": "Valtozott_xml",
        "destinationKey": "target",
        "options": {}
      },
      "id": "d2546548-c553-4f07-9e2d-c638adc4c7df",
      "name": "Extract Changed",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -2280,
        940
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9b6ae32d-d530-48f7-ae00-cdda5a04d58b",
              "name": "source",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "3907405b-448a-4416-a384-28f4af480ad7",
      "name": "Move data to source",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1900,
        700
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9b6ae32d-d530-48f7-ae00-cdda5a04d58b",
              "name": "target",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "fc35f5a8-cfd1-4da5-9ae1-e3232dab8a60",
      "name": "Move data to target",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1900,
        940
      ]
    },
    {
      "parameters": {
        "keys": {
          "key": [
            {
              "currentKey": "Kiindulo xml",
              "newKey": "sourceXml"
            },
            {
              "currentKey": "Valtozott xml",
              "newKey": "targetXml"
            }
          ]
        },
        "additionalOptions": {}
      },
      "id": "2cfbedf1-c34c-4a8f-bfc6-e36ede0c606b",
      "name": "Rename Keys",
      "type": "n8n-nodes-base.renameKeys",
      "typeVersion": 1,
      "position": [
        -2100,
        440
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "numberInputs": 3,
        "options": {}
      },
      "id": "951d0733-fbca-4058-8e74-26c85ce2c473",
      "name": "Combine xml with metadata",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -1480,
        460
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "55eeca1b-28e3-47b8-917e-74db38f03a0d",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -540,
        480
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function extractUniqueId(data) {\n    // Safely access adozo.adoszam and munkavallalo.adoazonosito\n    const companyTaxNumber = data?.adozo?.adoszam;\n    const employeeTaxNumber = data?.munkavallalo?.adoazonosito;\n\n    // Check if both values exist\n    if (companyTaxNumber && employeeTaxNumber) {\n        return companyTaxNumber + \"-\" + employeeTaxNumber;\n    } else if (companyTaxNumber) {\n      return companyTaxNumber;\n    } else {\n        return null; // Return null or another default value if any part is missing\n    }\n}\n\nfunction normalizeFormFields(fieldArray) {\n  const result = fieldArray.reduce(function (acc, item) {    \n    if (item.eazon && item._) {\n       acc[item.eazon] = item._;      \n    }\n    return acc;\n  }, {})\n  return result;\n}\n\nfunction normalizeForm(data) {\n  const input = !Array.isArray(data) && typeof data === 'object' ? [data] : data;\n  return input.reduce(function (result, item) {\n    const info = item.nyomtatvanyinformacio;\n    const fieldArray = item.mezok?.mezo;\n    const id = extractUniqueId(info)\n    const fields = normalizeFormFields(fieldArray);\n    item.mezok.mezo = fields;\n    result[id] = item;\n    return result;\n  }, {});  \n}\n\nconst sForms = $input.item.json.source.nyomtatvanyok;\n\n$input.item.json.source.nyomtatvanyok = {\n  abev: sForms.abev,\n  nyomtatvany: normalizeForm(sForms.nyomtatvany)\n}\n\nconst tForms = $input.item.json.target.nyomtatvanyok;\n\n$input.item.json.target.nyomtatvanyok = {\n  abev: tForms.abev,\n  nyomtatvany: normalizeForm(tForms.nyomtatvany)\n}\n\nreturn $input.item;"
      },
      "id": "669ca801-7bfd-4720-b4ad-627701e7eb06",
      "name": "Normalize forms",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1160,
        460
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const createType = (id) =>  id?.indexOf(\"-\") === -1 ? 'Alkalmazo' : 'Alkalmazott';\n\n// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst source = $input.item.json.source;\nconst target = $input.item.json.target;\n\n// get all the keys of item in nyomtatvany (source)\nconst sourceKeys = Object.keys(source?.nyomtatvanyok?.nyomtatvany);\nconst targetKeys = Object.keys(target?.nyomtatvanyok?.nyomtatvany);\n// get all the keys of item in nyomtatvany (target)\n\n// Find common items between the two arrays\nconst commonItems = sourceKeys.filter(item => targetKeys.includes(item));\n\n// Find items only in array1 (not in array2)\nconst uniqueToSource = sourceKeys.filter(item => !targetKeys.includes(item));\n\n// Find items only in array2 (not in array1)\nconst uniqueToTarget = targetKeys.filter(item => !sourceKeys.includes(item));\n\nconst commonForms = commonItems.map((id) => {\n  const orig = source?.nyomtatvanyok?.nyomtatvany[id];\n  const changed = target?.nyomtatvanyok?.nyomtatvany[id];\n  return {\n    id: id,\n    value: orig,\n    changedTo: changed,\n    action: 'M',\n    type: createType(id)\n  }\n});\n\nconst sourceFomrs = uniqueToSource.map((id) => {\n  const orig = source?.nyomtatvanyok?.nyomtatvany[id];\n  return {\n    id: id,\n    value: orig,\n    action: 'T',\n    type: createType(id)\n  }\n});\n\nconst targetForms = uniqueToTarget.map((id) => {\n  const changed = target?.nyomtatvanyok?.nyomtatvany[id];\n  return {\n    id: id,\n    changedTo: changed,\n    action: 'U',\n    type: createType(id)\n  }\n});\n\n$input.item.json.forms = [...commonForms, ...sourceFomrs, ...targetForms];\n\nreturn $input.item;"
      },
      "id": "2fc0d529-e83b-4dec-9274-2bbfb7b12f01",
      "name": "Create form diffs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -940,
        460
      ]
    },
    {
      "parameters": {
        "path": "f70780c7-ffc6-40d8-8521-7e7a3c35ff77",
        "formTitle": "Abev űrlap összehasonlító",
        "formDescription": "Fel kell töltened a forrásfájlt és a végleges fájlt. Ez az eszköz összehasonlítja a fájlokat, és elküldi neked az eredményt.",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Kiindulo xml",
              "fieldType": "file",
              "multipleFiles": false,
              "acceptFileTypes": ".xml",
              "requiredField": true
            },
            {
              "fieldLabel": "Valtozott xml",
              "fieldType": "file",
              "multipleFiles": false,
              "acceptFileTypes": ".xml",
              "requiredField": true
            },
            {
              "fieldLabel": "Email",
              "fieldType": "email",
              "placeholder": "Email cim",
              "requiredField": true
            }
          ]
        },
        "options": {
          "respondWithOptions": {
            "values": {
              "formSubmittedText": "A kérésed benyújtásra került a munkafolyamatba."
            }
          }
        }
      },
      "id": "7edd0e07-0abe-4058-ae44-a49842d9ea25",
      "name": "form",
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.1,
      "position": [
        -2700,
        620
      ],
      "webhookId": "f70780c7-ffc6-40d8-8521-7e7a3c35ff77"
    }
  ],
  "pinData": {},
  "connections": {
    "Convert XML to JSON": {
      "main": [
        [
          {
            "node": "Move data to source",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FTP Download Mapping": {
      "main": [
        [
          {
            "node": "Extract from Mapping.csv",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Mappings": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Generate diff": {
      "main": [
        [
          {
            "node": "Convert to CSV structure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to CSV structure": {
      "main": [
        [
          {
            "node": "Only Employer Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Only Employee",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Merge Result to single stream",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File Dolg": {
      "main": [
        [
          {
            "node": "Merge Result to single stream",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Filter Changes": {
      "main": [
        [
          {
            "node": "Convert to File Dolg Chnages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File Dolg Chnages": {
      "main": [
        [
          {
            "node": "Merge Result to single stream",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Filter No Changes": {
      "main": [
        [
          {
            "node": "Convert to File Dolg No Chnages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File Dolg No Chnages": {
      "main": [
        [
          {
            "node": "Merge Result to single stream",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Only Employer Data": {
      "main": [
        [
          {
            "node": "Convert DIFF to CSV structure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert DIFF to CSV structure": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Only Employee": {
      "main": [
        [
          {
            "node": "Convert DIFF to CSV structure1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert DIFF to CSV structure1": {
      "main": [
        [
          {
            "node": "Convert to File Dolg",
            "type": "main",
            "index": 0
          },
          {
            "node": "Filter Changes",
            "type": "main",
            "index": 0
          },
          {
            "node": "Filter No Changes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compression": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Compression",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Result to single stream": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Mapping.csv": {
      "main": [
        [
          {
            "node": "Normalize Mappings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert XML to JSON1": {
      "main": [
        [
          {
            "node": "Move data to target",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Start": {
      "main": [
        [
          {
            "node": "Convert XML to JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Changed": {
      "main": [
        [
          {
            "node": "Convert XML to JSON1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move data to source": {
      "main": [
        [
          {
            "node": "Combine xml with metadata",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Move data to target": {
      "main": [
        [
          {
            "node": "Combine xml with metadata",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Rename Keys": {
      "main": [
        [
          {
            "node": "Combine xml with metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine xml with metadata": {
      "main": [
        [
          {
            "node": "Normalize forms",
            "type": "main",
            "index": 0
          },
          {
            "node": "FTP Download Mapping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Generate diff",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize forms": {
      "main": [
        [
          {
            "node": "Create form diffs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create form diffs": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "form": {
      "main": [
        [
          {
            "node": "Extract Start",
            "type": "main",
            "index": 0
          },
          {
            "node": "Extract Changed",
            "type": "main",
            "index": 0
          },
          {
            "node": "Rename Keys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9d871a53-3406-434e-bcbb-987ad77cffdb",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7cfddeb6999f34b6da92291d1629f587d828f7bfb858bf018672cb83a32e762c"
  },
  "id": "EtVm8cC3PX3UKIIr",
  "tags": []
}