{
  "name": "Calculate Distance",
  "nodes": [
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "XLSX_File",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -1400,
        300
      ],
      "id": "7c3c3b06-5fd3-4d01-b3ce-c8daf0757a24",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function sanitizeKeyName(key) {\n  // Normalize the string to decompose special characters and remove diacritics\n  return key\n    .normalize(\"NFD\") // Decomposes characters, e.g., \"é\" becomes \"e\"\n    .replace(/[\\u0300-\\u036f]/g, \"\") // Removes combining diacritical marks\n    .toLowerCase() // Convert to lowercase\n    .replace(/[^a-z0-9]/g, \"\"); // Remove remaining special characters\n}\n\nfunction sanitizeObjectKeys(obj) {\n  if (Array.isArray(obj)) {\n    // If the object is an array, recursively sanitize its elements\n    return obj.map(sanitizeObjectKeys);\n  } else if (obj !== null && typeof obj === \"object\") {\n    // If the object is an object, recursively sanitize its keys and values\n    return Object.keys(obj).reduce((acc, key) => {\n      const sanitizedKey = sanitizeKeyName(key);\n      acc[sanitizedKey] = sanitizeObjectKeys(obj[key]);\n      return acc;\n    }, {});\n  }\n  // If the object is a primitive value, return it as is\n  return obj;\n}\n\nreturn sanitizeObjectKeys($input.item.json);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1180,
        300
      ],
      "id": "287124d2-beb0-4551-8c5a-b5cf9521ecab",
      "name": "Normalize Field Names"
    },
    {
      "parameters": {
        "maxItems": 1000
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -960,
        300
      ],
      "id": "4066452c-2599-4286-93f0-3c466320e921",
      "name": "Limit"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.tavolsag }}",
                    "rightValue": 0,
                    "operator": {
                      "type": "number",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "km_missing"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4674a58b-2218-42d1-bd7a-ae48c9d7ca0f",
                    "leftValue": null,
                    "rightValue": 0,
                    "operator": {
                      "type": "number",
                      "operation": "notEquals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "km_ok"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -520,
        300
      ],
      "id": "49d3cf1b-bf63-4d46-b37c-9d3ddb394d6b",
      "name": "Switch"
    },
    {
      "parameters": {
        "url": "https://maps.googleapis.com/maps/api/distancematrix/json",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "origins",
              "value": "={{ $json.kiindulas }}"
            },
            {
              "name": "destinations",
              "value": "={{ $json.celallomas }}"
            },
            {
              "name": "units",
              "value": "metric"
            },
            {
              "name": "mode",
              "value": "driving"
            },
            {
              "name": "key",
              "value": "={{$env['GOOGLE_MAPS_API_KEY']}}"
            },
            {
              "name": "language",
              "value": "hu"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        0
      ],
      "id": "6543d8b7-0d4b-4a56-8d99-818454365efc",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "clashHandling": {
            "values": {
              "resolveClash": "preferLast"
            }
          }
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        500,
        140
      ],
      "id": "5c9738bd-99a5-425d-8089-9b41f5651031",
      "name": "Merge"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function convertToHoursMinutes(seconds) {\n    // Calculate the number of hours\n    let hours = Math.floor(seconds / 3600);\n    // Calculate the remaining minutes\n    let minutes = Math.floor((seconds % 3600) / 60);\n    return { hours: hours, minutes: minutes };\n}\n\nconst distance = $input.item.json.rows?.[0].elements?.[0].distance?.value??0;\nconst distance_km = Math.round(distance / 1000);\nconst duration = $input.item.json.rows?.[0].elements?.[0].duration?.value??0;\nconst time = convertToHoursMinutes(duration);\n\nreturn {\n  kiindulas_cim: $input.item.json.origin_addresses?.[0]??'Ismeretlen kiindulasi cim',  \n  celallomas_cim: $input.item.json.destination_addresses?.[0]??'Ismeretlen celallomas',\n  tavolsag: distance,\n  tavolsag_km: distance_km,\n  idotartam: duration,\n  idotartam_ora: `${time.hours} óra, ${time.minutes} perc`\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        0
      ],
      "id": "824d2f46-4b27-4bc9-804d-ed0209c1737f",
      "name": "Normalize distance info"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "$input.item.json.tavolsag = $input.item.json.tavolsag || 0;\nreturn $input.item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -740,
        300
      ],
      "id": "42034049-253e-41fa-bc81-bbd40962ae15",
      "name": "Create distance field"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function createDestinationAddressString(obj) {\n  // Destructure the fields from the destination object\n  const { \n    szekhelyorszag, \n    szekhelyirszam, \n    szekhelytelepules, \n    szekhelyutca, \n    szekhelyhsz \n  } = obj;\n\n  // Construct the address string\n  return `${szekhelyutca} ${szekhelyhsz}, ${szekhelyirszam} ${szekhelytelepules}, ${szekhelyorszag}`;\n  \n}\n  \nfunction createSourceAddressString(obj) {\n  // Destructure the fields from the input object\n  const { iranyitoszam, varos, kozterulet, kozteruletjellege, hazszam } = obj;\n\n  // Construct the address string using template literals\n  return `${varos}, ${kozterulet} ${kozteruletjellege} ${hazszam}, ${iranyitoszam} Magyarország`;\n}\n\n$input.item.json.kiindulas = createSourceAddressString($input.item.json);\n$input.item.json.celallomas = createDestinationAddressString($input.item.json);\n\nreturn $input.item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -280,
        120
      ],
      "id": "0a93a6e5-20cf-4f42-85d2-0d4a3a91151d",
      "name": "Create Source and Target Fields"
    },
    {
      "parameters": {
        "operation": "xls",
        "options": {
          "fileName": "=feldolgozott_{{ $('form').first().json[\"XLSX File\"].filename }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        920,
        300
      ],
      "id": "14c9c6ea-a366-4377-a3df-8d267ac3bcaa",
      "name": "Convert to File"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        700,
        300
      ],
      "id": "597caeae-3d90-4f7c-ab11-7331d2a74fba",
      "name": "Merge with non filtered"
    },
    {
      "parameters": {
        "fromEmail": "noreply@hr-group.hu",
        "toEmail": "={{ $('form').first().json.Email }}",
        "subject": "Tavolsag kalkulacio elkeszult",
        "emailFormat": "text",
        "text": "A munkafolyamatod sikeresen feldolgozásra került, kérlek, keresd a csatolt a XLSX fájlt az e-mailben, amely tartalmazza az eredmenyeket.",
        "options": {
          "appendAttribution": false,
          "attachments": "=data"
        }
      },
      "id": "ea2e0319-602e-4476-b1c0-87c3a2c67c78",
      "name": "Send Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        1160,
        300
      ],
      "credentials": {
        "smtp": {
          "id": "HvaFmlUrvL4Xz7Re",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "formTitle": "Távolság Kalkulátor",
        "formDescription": "Kérjük, töltse fel az Excel fájlt, amely tartalmazza a forrást és a célt, és adja meg az e-mail címét. A rendszer a fájlban található adatokat felhasználva kiszámítja a forrás és a cél közötti távolságot, majd az eredményt az Ön által megadott e-mail címre küldi el.",
        "formFields": {
          "values": [
            {
              "fieldLabel": "XLSX File",
              "fieldType": "file",
              "multipleFiles": false,
              "acceptFileTypes": ".xlsx",
              "requiredField": true
            },
            {
              "fieldLabel": "Email",
              "fieldType": "email",
              "placeholder": "Emailcim",
              "requiredField": true
            }
          ]
        },
        "options": {
          "buttonLabel": "Küldés",
          "respondWithOptions": {
            "values": {
              "formSubmittedText": "Hamarosan emailben elküldjük az adatokat a megadott emailcímre."
            }
          }
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -1680,
        300
      ],
      "id": "fb878299-e034-4750-ad87-92bd2c07c32d",
      "name": "form",
      "webhookId": "7c15f021-6152-4670-9b70-62a6de8778ef"
    }
  ],
  "pinData": {},
  "connections": {
    "Extract from File": {
      "main": [
        [
          {
            "node": "Normalize Field Names",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Field Names": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Create distance field",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Create Source and Target Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge with non filtered",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Normalize distance info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize distance info": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Create distance field": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Source and Target Fields": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Merge with non filtered",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge with non filtered": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "form": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9c9f05c6-ec03-41d0-8880-137eb99b9064",
  "meta": {
    "instanceId": "7cfddeb6999f34b6da92291d1629f587d828f7bfb858bf018672cb83a32e762c"
  },
  "id": "F0vd5FNr8kODWlzs",
  "tags": []
}