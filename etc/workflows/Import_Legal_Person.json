{
  "name": "Import Legal Person",
  "nodes": [
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "File",
        "options": {
          "headerRow": true
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -300,
        60
      ],
      "id": "d8f4807b-2c68-4a8a-ab7a-57b99c00ac01",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "c1a1b65a-0f17-4af4-a6ba-ffd34b643618",
              "leftValue": "={{ $json.code }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "3ff997b1-71a4-45b0-b832-869e0adf47d2",
              "leftValue": "={{ $json.code }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        180,
        -20
      ],
      "id": "3589083a-0853-4f6b-ac75-c6eed08b1f7d",
      "name": "Remove invalid entries"
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "endpoint": "={{$env['BER_GRAPHQL_ENDPOINT']}}",
        "query": "query getLegalPerson($limit: Int, $offset: Int, $legalPersonWhere: legal_person_bool_exp, $sort: [legal_person_order_by!]) {\n  legal_person(limit: $limit, offset: $offset, where: $legalPersonWhere) {\n    id\n    code\n    archived\n    name\n    country\n    region {\n      id\n      name\n      country\n    }\n    legal_person_types {\n      type      \n    }\n    legal_person_addresses(where: {_and: {archived: {_eq: \"ACTIVE\"}, to: {_is_null: true}}}) {\n      id\n      address {\n        id\n        city\n        postcode\n        area\n        area_type\n        number\n        building\n        stairway\n        floor\n        door\n      }\n      from\n      to\n      archived\n    }\n    legal_person_identifiers(where: {_and: {archived: {_eq: \"ACTIVE\"}, to: {_is_null: true}}}) {\n      id\n      identifier\n      country\n      from\n      to\n      issuer {\n        id\n        name\n      }\n      type\n      primary\n    }\n    legal_person_integrations(where: {_and: {archived: {_eq: \"ACTIVE\"}, to: {_is_null: true}}}) {\n      id\n      identifier\n      integration {\n        id\n        name\n        slug\n      }\n    }\n  }\n}",
        "variables": "={\n  \"limit\": 1,\n  \"offset\": 0,\n  \"legalPersonWhere\": {\n    \"_and\": [\n      {\n        \"archived\": {\n          \"_eq\": \"ACTIVE\"\n        }\n      },\n      {\n        \"code\": {\n          \"_ilike\": \"{{ $json.code }}\"\n        }\n      }\n    ]\n  }\n}"
      },
      "type": "n8n-nodes-base.graphql",
      "typeVersion": 1.1,
      "position": [
        460,
        120
      ],
      "id": "12a9065e-8876-43e3-8848-453c7afe6ed0",
      "name": "Load legal person",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Y4AtWUgOfsqxWN4R",
          "name": "Hasura Admin Secret"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -740,
        -240
      ],
      "id": "f6f5ec8e-569b-484a-94dd-4ce3e44f54e0",
      "name": "When clicking ‘Test workflow’",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    \"nr\": 1,\n    \"name\": \"A. Bittner GmbH & Co. KG\",\n    \"uid\": \"DE128092841\",\n    \"org_code\": 1122,\n    \"code\": \"BITT\",\n    \"ext_jira\": \"IGA-811\",\n    \"country\": \"DEU\",\n    \"address_country\": \"DEU\",\n    \"address_post_code\": 85410,\n    \"address_city\": \"Untermarchenbach\",\n    \"address_street\": \"Kreisstraße\",\n    \"address_number\": \"35\",\n    \"borrower\": 1,\n    \"lender\": 1,\n    \"deductor\": 0\n  },\n  {\n    \"nr\": 2,\n    \"name\": \"A. Moser Kranbau GmbH\",\n    \"uid\": \"ATU57622825\",\n    \"org_code\": 1148,\n    \"code\": \"AMKG\",\n    \"ext_jira\": \"IGA-810\",\n    \"country\": \"AUT\",\n    \"address_country\": \"AUT\",\n    \"address_post_code\": 4813,\n    \"address_city\": \"Altmünster\",\n    \"address_street\": \"Pichlhofstraße\",\n    \"address_number\": \"12\",\n    \"borrower\": 0,\n    \"lender\": 1,\n    \"deductor\": 0\n  },\n  {\n    \"nr\": 3,\n    \"name\": \"AEK TEC GmbH\",\n    \"uid\": \"DE815011979\",\n    \"code\": \"AKTC\",\n    \"ext_jira\": \"IGA-812\",\n    \"country\": \"DEU\",\n    \"address_country\": \"DEU\",\n    \"address_post_code\": 85411,\n    \"address_city\": \"Hohenkammer\",\n    \"address_street\": \"Am Königholz\",\n    \"address_number\": \"1\",\n    \"borrower\": 0,\n    \"lender\": 0,\n    \"deductor\": 1\n  },\n  {\n    \"nr\": 4,\n    \"name\": \"AG Schweisstechnik\",\n    \"uid\": \"DE234138555\",\n    \"code\": \"AGSS\",\n    \"ext_jira\": \"IGA-813\",\n    \"country\": \"DEU\",\n    \"address_country\": \"DEU\",\n    \"address_post_code\": 76137,\n    \"address_city\": \"Karlsruhe\",\n    \"address_street\": \"Litzenhard str\",\n    \"address_number\": \"97\",\n    \"borrower\": 1,\n    \"lender\": 0,\n    \"deductor\": 0\n  },\n  {\n    \"nr\": 5,\n    \"name\": \"Alba Industries GmbH\",\n    \"uid\": \"AT35364805\",\n    \"org_code\": 1153,\n    \"code\": \"ALIN\",\n    \"ext_jira\": \"IGA-3560\",\n    \"country\": \"AUT\",\n    \"address_country\": \"AUT\",\n    \"address_post_code\": 5552,\n    \"address_city\": \"Forstau\",\n    \"address_street\": \"Winkl\",\n    \"address_number\": \"133\",\n    \"borrower\": 1,\n    \"lender\": 0,\n    \"deductor\": 0\n  },\n  {\n    \"nr\": 6,\n    \"name\": \"ALGI Alfred Giehl GmbH & Co. KG\",\n    \"uid\": \"DE113654007\",\n    \"org_code\": 1151,\n    \"code\": \"ALGI\",\n    \"ext_jira\": \"IGA-3522\",\n    \"country\": \"DEU\",\n    \"address_country\": \"DEU\",\n    \"address_post_code\": 65343,\n    \"address_city\": \"Eltville\",\n    \"address_street\": \"Schwalbacher Straße\",\n    \"address_number\": \"49-51\",\n    \"borrower\": 0,\n    \"lender\": 0,\n    \"deductor\": 1\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -520,
        -240
      ],
      "id": "9a63d3fb-91f0-4d26-b94f-0cc76a4b6837",
      "name": "Code",
      "disabled": true
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        880,
        -40
      ],
      "id": "b239a05b-b414-448b-9c5d-1c20b9512f7c",
      "name": "Merge"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const { nanoid } = require('nanoid');\n\n/**\n * Safely converts a value to a string.\n *\n * @param {*} value - The value to be converted.\n * @param {string} [defaultValue=\"\"] - The default value to return if the input is null or undefined.\n * @returns {string} The string representation of the value, or the default value.\n */\nfunction safeGet(value, defaultValue = \"\") {\n  return (value !== undefined && value !== null) ? value.toString() : defaultValue;\n}\n\n/**\n * Creates commands to process the legal person's address based on comparison between the loaded\n * legal person's current address(es) and the upserted legal person address fields.\n *\n * @param {Object|null} loadedLegalPerson - The existing legal person object (if any)\n * @param {Object} upsertedLegalPerson - The new legal person data containing address fields (prefixed with \"address_\")\n * @returns {Array<Object>} An array of commands (empty if no address change is needed)\n */\nfunction createLegalPersonAddressCommands(legalPersonId, loadedLegalPerson, upsertedLegalPerson) {\n  // Build the new address from upsertedLegalPerson fields.\n  const newAddress = {\n    country: upsertedLegalPerson.address_country,\n    postCode: safeGet(upsertedLegalPerson.address_post_code),    \n    city: upsertedLegalPerson.address_city,\n    street: upsertedLegalPerson.address_street,\n    number: safeGet(upsertedLegalPerson.address_number)\n  };\n\n  const legalPersonCode = (loadedLegalPerson && loadedLegalPerson.code) ? loadedLegalPerson.code : upsertedLegalPerson.code;\n\n  // If a loaded legal person exists, process its existing addresses.\n  if (loadedLegalPerson && Object.keys(loadedLegalPerson).length > 0) {\n    const addresses = loadedLegalPerson.legal_person_addresses || [];\n    \n    // If there is at least one existing address, compare it with the new address.\n    if (addresses.length > 0) {\n      const existingAddrObj = addresses[0];\n      const existingAddress = {\n        // Note: We use the legal person's top-level country for comparison.\n        country: loadedLegalPerson.country,\n        postCode: safeGet(existingAddrObj.address?.postcode),\n        city: existingAddrObj.address.city,\n        street: existingAddrObj.address.area,\n        number: safeGet(existingAddrObj.address?.number)\n      };\n\n      const isSame = existingAddress.country === newAddress.country &&\n                     existingAddress.postCode === newAddress.postCode &&\n                     existingAddress.city === newAddress.city &&\n                     existingAddress.street === newAddress.street &&\n                     existingAddress.number === newAddress.number;\n\n      if (isSame) {\n        // The address is unchanged. No commands are needed.\n        return [];\n      } else {\n        // The address has changed. Create a CHANGE_LEGAL_PERSON_ADDRESS command.\n        return [{\n          type: \"legalPersonAddress/CHANGE\",\n          value: {\n            id: legalPersonId,\n            code: legalPersonCode,\n            fromAddress: {\n              id: existingAddrObj.id\n            },\n            toAddress: newAddress\n          }\n        }];\n      }\n    } else {\n      // No existing address is found. Create a new address command.\n      return [{\n        type: \"legalPersonAddress/CREATE\",\n        value: {\n          id: legalPersonId,\n          code: legalPersonCode,\n          toAddress: newAddress\n        }\n      }];\n    }\n  } else {\n    // No loaded legal person exists: create a new legal person address command.\n    return [{\n      type: \"legalPersonAddress/CREATE\",\n      value: {\n        id: legalPersonId,\n        code: legalPersonCode,\n        toAddress: newAddress\n      }\n    }];\n  }\n}\n\n/**\n * Creates a legal person command.\n *\n * @param {Object|null} loadedLegalPerson - The existing legal person object (if any).\n * @param {Object} upsertedLegalPerson - The new data to be upserted.\n * @returns {Object} The command to update or create the legal person.\n */\nfunction createLegalPersonCommand(legalPersonId, loadedLegalPerson, upsertedLegalPerson) {\n  // If loadedLegalPerson is null/undefined or an empty object, we need to create a new legal person.\n  const isCreate = !loadedLegalPerson || Object.keys(loadedLegalPerson).length === 0;\n  \n  if (isCreate) {\n    return {\n      type: \"legalPerson/CREATE\",\n      value: {\n        // Generate a new id using nanoid\n        id: legalPersonId,\n        name: upsertedLegalPerson.name,\n        // Assuming upsertedLegalPerson.address_country holds the country code (e.g., \"AUT\")\n        country: upsertedLegalPerson.address_country,\n        // For creation, include additional fields like code\n        code: upsertedLegalPerson.code\n      }\n    };\n  } else {\n    // For an update, we use the id from the existing legal person.\n    if (loadedLegalPerson.name === upsertedLegalPerson.name) {\n        return null;\n    }\n\n    return {\n      type: \"legalPerson/UPDATE\",\n      value: {\n        id: loadedLegalPerson.id,\n        name: upsertedLegalPerson.name,\n        country: upsertedLegalPerson.address_country\n      }\n    };\n  }\n}\n\nfunction compareAsString(a, b) {\n    const normalize = (value) =>\n      value === null || value === undefined ? '' : String(value);\n      \n    return normalize(a) === normalize(b);\n  }\n\n/**\n * Creates a command for handling the legal person's organization code (org_code).\n *\n * Scenarios:\n * 1. If loadedLegalPerson is null or an empty object, create a CREATE_LEGAL_PERSON_ORG_CODE command.\n * 2. If loadedLegalPerson exists and has a legal_person_identifiers array with an element where type === \"ORG_CODE\":\n *    - If the existing identifier's value is the same as the new org_code, do nothing (return null).\n *    - Otherwise, create an UPDATE_LEGAL_PERSON_ORG_CODE command.\n * 3. If loadedLegalPerson exists but no ORG_CODE type element is found, create a CREATE_LEGAL_PERSON_ORG_CODE command.\n * @param {Object|null} loadedLegalPerson - The existing legal person object, or null if not found.\n * @param {Object} upsertedLegalPerson - The new legal person data containing the org_code field and possibly the code.\n * @returns {Object|null} The command object for creating or updating the legal person's org_code,\n *                         or null if no update is needed.\n */\nfunction createLegalPersonOrgCodeCommand(legalPersonId, loadedLegalPerson, upsertedLegalPerson) {\n  const legalPersonCode = (loadedLegalPerson && loadedLegalPerson.code) ? loadedLegalPerson.code : upsertedLegalPerson.code;\n\n  // Get the org_code from the upserted data.\n  const orgCode = upsertedLegalPerson.org_code;\n  if (!orgCode) {\n    return null;\n  }\n\n  // If there is no loaded legal person, create a new org code command.\n  if (!loadedLegalPerson || Object.keys(loadedLegalPerson).length === 0) {\n    return {\n      type: \"legalPerson/CREATE_ORG_CODE\",\n      value: {\n        id: legalPersonId,\n        code: legalPersonCode,\n        org_code: orgCode\n      }\n    };\n  }\n\n  // For an existing legal person, check for an existing ORG_CODE identifier.\n  const identifiers = loadedLegalPerson.legal_person_identifiers || [];\n  const orgCodeIdentifier = identifiers.find(identifier => identifier.type === \"ORG_CODE\");\n\n  if (orgCodeIdentifier) {\n    // If the existing ORG_CODE identifier matches the new orgCode, no update is needed.\n    if (compareAsString(orgCodeIdentifier.identifier, orgCode)) {\n      return null;\n    }\n    // Otherwise, create an update command.\n    return {\n      type: \"legalPerson/CHANGE_ORG_CODE\",\n      value: {\n        id: legalPersonId,\n        code: legalPersonCode,\n        org_code: orgCode\n      }\n    };\n  } else {\n    // No ORG_CODE identifier exists; create one.\n    return {\n      type: \"legalPerson/CREATE_ORG_CODE\",\n      value: {\n        id: legalPersonId,\n        code: legalPersonCode,\n        org_code: orgCode\n      }\n    };\n  }\n}\n\n/**\n * Creates a command for handling the legal person's tax number.\n *\n * Scenarios:\n * 1. If loadedLegalPerson is null or an empty object, create a CREATE_LEGAL_PERSON_TAX_NUMBER command.\n * 2. If loadedLegalPerson exists and has a TAXN identifier:\n *    - If its value (identifier) is the same as the new uid, do not create any command (return null).\n *    - Otherwise, create an UPDATE_LEGAL_PERSON_TAX_NUMBER command.\n * 3. If loadedLegalPerson exists but does not have a TAXN identifier, create a CREATE_LEGAL_PERSON_TAX_NUMBER command.\n *\n * @param {Object|null} loadedLegalPerson - The existing legal person object, or null if not found.\n * @param {Object} upsertedLegalPerson - The new legal person data containing the uid (tax number) and possibly the code.\n * @returns {Object|null} The command object for creating or updating the legal person's tax number,\n *                         or null if no update is needed.\n */\nfunction createLegalPersonTaxNumberCommand(legalPersonId, loadedLegalPerson, upsertedLegalPerson) {\n\n  const legalPersonCode = (loadedLegalPerson && loadedLegalPerson.code) ? loadedLegalPerson.code : upsertedLegalPerson.code;\n\n  // Get the tax code from the upserted data.\n  const taxCode = upsertedLegalPerson.uid;\n\n  // If there is no loaded legal person, create a new tax number.\n  if (!loadedLegalPerson || Object.keys(loadedLegalPerson).length === 0) {\n    return {\n      type: \"legalPerson/CREATE_TAX_NUMBER\",\n      value: {\n        id: legalPersonId,\n        code: legalPersonCode,\n        taxcode: taxCode\n      }\n    };\n  }\n\n  // For an existing legal person, check for an existing TAXN identifier.\n  const identifiers = loadedLegalPerson.legal_person_identifiers || [];\n  const taxIdentifier = identifiers.find(identifier => identifier.type === \"TAXN\");\n\n  if (taxIdentifier) {\n    // If the existing TAXN identifier matches the new taxCode, no update is needed.\n    if (taxIdentifier.identifier === taxCode) {\n      return null;\n    }\n    // Otherwise, create an update command.\n    return {\n      type: \"legalPerson/CHANGE_TAX_NUMBER\",\n      value: {\n        id: legalPersonId,\n        code: legalPersonCode,\n        taxcode: taxCode\n      }\n    };\n  } else {\n    // No TAXN identifier exists; create one.\n    return {\n      type: \"legalPerson/CREATE_TAX_NUMBER\",\n      value: {\n        id: legalPersonId,\n        code: legalPersonCode,\n        taxcode: taxCode\n      }\n    };\n  }\n}\n\n/**\n * Creates a command for handling the legal person's JIRA identifier (ext_jira).\n *\n * Scenarios:\n * 1. If loadedLegalPerson is null or an empty object, create a CREATE_LEGAL_PERSON_JIRA_IDENTIFIER command.\n * 2. If loadedLegalPerson exists:\n *    - Filter the legal_person_integrations array to find an element where:\n *         a) It has an \"identifier\" property.\n *         b) Its \"integration.slug\" equals \"jira\".\n *    - If found:\n *         - If its \"identifier\" matches the new ext_jira, no command is needed (return null).\n *         - Otherwise, create an UPDATE_LEGAL_PERSON_JIRA_IDENTIFIER command.\n *    - If not found, create a CREATE_LEGAL_PERSON_JIRA_IDENTIFIER command.\n *\n * @param {Object|null} loadedLegalPerson - The existing legal person object, or null if not found.\n * @param {Object} upsertedLegalPerson - The new legal person data containing ext_jira and possibly the code.\n * @returns {Object|null} The command object for creating or updating the legal person's JIRA identifier,\n *                         or null if no update is needed.\n */\nfunction createLegalPersonJiraIdentifierCommand(legalPersonId, loadedLegalPerson, upsertedLegalPerson) {\n  \n  const legalPersonCode = (loadedLegalPerson && loadedLegalPerson.code) ? loadedLegalPerson.code : upsertedLegalPerson.code;\n\n  // Get the JIRA identifier from the upserted data.\n  const extJira = upsertedLegalPerson.ext_jira;\n\n  // If there is no loaded legal person or it's empty, create the identifier.\n  if (!loadedLegalPerson || Object.keys(loadedLegalPerson).length === 0) {\n    return {\n      type: \"legalPerson/CREATE_JIRA_ID\",\n      value: {\n        id: legalPersonId,\n        code: legalPersonCode,\n        identifier: extJira\n      }\n    };\n  }\n\n  // For an existing legal person, filter the legal_person_integrations for an entry with integration.slug === \"jira\".\n  const integrations = loadedLegalPerson.legal_person_integrations || [];\n  const jiraIntegration = integrations.find(entry =>\n    entry.integration && entry.integration.slug === \"jira\" && entry.identifier !== undefined\n  );\n\n  if (jiraIntegration) {\n    // If the existing identifier matches the new ext_jira, no update is needed.\n    if (jiraIntegration.identifier === extJira) {\n      return null;\n    }\n    // Otherwise, update the JIRA identifier.\n    return {\n      type: \"legalPerson/CHANGE_JIRA_ID\",\n      value: {\n        id: legalPersonId,\n        code: legalPersonCode,\n        identifier: extJira\n      }\n    };\n  } else {\n    // No JIRA integration found; create one.\n    return {\n      type: \"legalPerson/CREATE_JIRA_ID\",\n      value: {\n        id: legalPersonId,\n        code: legalPersonCode,\n        identifier: extJira\n      }\n    };\n  }\n}\n\n/**\n * Creates commands for updating legal person type mappings (borrower, lender, deductor).\n *\n * If loadedLegalPerson is null or does not have a legal_person_types property,\n * only fields with a value of 1 will result in a MAKE command.\n *\n * If loadedLegalPerson exists and has legal_person_types, then for each type:\n *  - If the upserted value is 1 and the mapping doesn't exist, create a MAKE command.\n *  - If the upserted value is 0 and the mapping exists, create a REMOVE command.\n *  - Otherwise, no command is needed.\n *\n * @param {Object|null} loadedLegalPerson - The existing legal person object, or null if not present.\n * @param {Object} upsertedLegalPerson - The new legal person data containing boolean fields:\n *                                         borrower, lender, and deductor.\n * @returns {Array<Object>} An array of commands for adjusting legal person types.\n */\nfunction createLegalPersonTypeCommands(legalPersonId, loadedLegalPerson, upsertedLegalPerson) {\n  const commands = [];\n  \n  const legalPersonCode = (loadedLegalPerson && loadedLegalPerson.code) ? loadedLegalPerson.code : upsertedLegalPerson.code;\n\n  // Define type configurations for borrower, lender, and deductor.\n  // Note: For deductor, we use the mapping type \"DEDUCTION_PARTY\".\n  const types = [\n    { field: 'borrower', mapping: 'BORROWER', makeCommand: \"legalPerson/MAKE_BORROWER\", removeCommand: \"legalPerson/REMOVE_BORROWER\" },\n    { field: 'lender', mapping: 'LENDER', makeCommand: \"legalPerson/MAKE_LENDER\", removeCommand: \"legalPerson/REMOVE_LENDER\" },\n    { field: 'deductor', mapping: 'DEDUCTION_PARTY', makeCommand: \"legalPerson/MAKE_DEDUCTOR\", removeCommand: \"legalPerson/REMOVE_DEDUCTOR\" },\n  ];\n\n  // Check if loadedLegalPerson exists and has legal_person_types.\n  const hasTypeMaps = loadedLegalPerson && Array.isArray(loadedLegalPerson.legal_person_types);\n\n  types.forEach(({ field, mapping, makeCommand, removeCommand }) => {\n    const state = upsertedLegalPerson[field]; // Expect 1 (true) or 0 (false)\n\n    if (!hasTypeMaps) {\n      // No loaded legal person or no type maps:\n      // Only create a MAKE command when the new state is 1.\n      if (state === 1) {\n        commands.push({\n          type: makeCommand,\n          value: {\n            id: legalPersonId,\n            code: legalPersonCode,\n          }\n        });\n      }\n    } else {\n      // loadedLegalPerson exists and has legal_person_types.\n      const mappingExists = loadedLegalPerson.legal_person_types.some(\n        (map) => map.type && map.type === mapping\n      );\n\n      if (state === 1 && !mappingExists) {\n        // New state is true, but the mapping is missing → create a MAKE command.\n        commands.push({\n          type: makeCommand,\n          value: {\n            id: legalPersonId,\n            code: legalPersonCode,\n          }\n        });\n      } else if (state === 0 && mappingExists) {\n        // New state is false, but a mapping exists → create a REMOVE command.\n        commands.push({\n          type: removeCommand,\n          value: {\n            id: legalPersonId,\n            code: legalPersonCode,\n          }\n        });\n      }\n      // If state === 1 and mapping exists, or state === 0 and mapping doesn't exist, do nothing.\n    }\n  });\n\n  return commands;\n}\n\nconst commandFunctions = [\n  createLegalPersonCommand,\n  createLegalPersonAddressCommands,\n  createLegalPersonTaxNumberCommand,\n  createLegalPersonOrgCodeCommand,\n  createLegalPersonJiraIdentifierCommand,\n  createLegalPersonTypeCommands\n]\n  \n// Add a new field called 'myNewField' to the JSON of the item\nconst data = $input.item.json;\nconst loadedLegalPerson = data.loadedLegalPerson;\nconst upsertedLegalPerson = data.upsertedLegalPerson;\n\n// Determine the legal person id and code.\n  // If the legal person exists, use its id and code; otherwise generate a new id.\n  const legalPersonId = (loadedLegalPerson && loadedLegalPerson.id) ? loadedLegalPerson.id : nanoid();\n\n\nconst allCommands = [];\n\ncommandFunctions.forEach(fn => {\n  const result = fn(legalPersonId, loadedLegalPerson, upsertedLegalPerson);\n  \n  // If the function returns an array of commands, add all of them.\n  if (Array.isArray(result)) {\n    allCommands.push(...result);\n  } else if (result) {\n    // If a single command object is returned and it's not null, push it.\n    allCommands.push(result);\n  }\n});\n  \nreturn {\n  commands: allCommands\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1080,
        -360
      ],
      "id": "9ac13ceb-144e-4b63-8ded-782b1b00ceb4",
      "name": "Create commands"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n  upsertedLegalPerson: $input.item.json\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        520,
        -200
      ],
      "id": "91318469-4dac-4167-8f3b-5be79973436b",
      "name": "UpsertedLegalPerson"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "/**\n * Normalizes the input to return a single object.\n *\n * - If input is null, returns an empty object.\n * - If input is an array:\n *    - Returns the first element if the array is not empty.\n *    - Returns an empty object if the array is empty.\n * - If input is a single object, returns the object.\n *\n * @param {Object | Object[] | null} input - The input value to normalize.\n * @returns {Object} - A normalized object.\n */\nfunction normalizeInput(input) {\n  // Check if the input is null.\n  if (input === null) {\n    return {};\n  }\n  \n  // Check if the input is an array.\n  if (Array.isArray(input)) {\n    // Return the first element if available, otherwise an empty object.\n    return input.length ? input[0] : {};\n  }\n  \n  // If it's a single object, return it as is.\n  if (typeof input === 'object') {\n    return input;\n  }\n  \n  // Fallback: in unexpected cases, return an empty object.\n  return {};\n}\n\nreturn {\n  loadedLegalPerson:  normalizeInput($input.item.json.data?.legal_person || null)  \n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        660,
        120
      ],
      "id": "1c5cd518-1c8d-4bb0-9479-0bce580bddde",
      "name": "LoadedLegalPerson"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env['BER_API_ENDPOINT'] }}/commandbus/dispatch",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{$env['BER_API_AUTH_TOKEN']}}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "=[\n  {\n    \"commands\": {{ JSON.stringify($json.commands) }}\n  }\n]\n",
        "options": {}
      },
      "id": "ceffcfc3-2fc6-4a08-a73c-3df5fb77a22a",
      "name": "Send commands to API",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1680,
        -380
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2020,
        -60
      ],
      "id": "c0f2e49e-fde5-42a4-99b7-2a9c8f93364e",
      "name": "Merge response with request"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "abc90ecf-8d35-4167-871c-fee991880ace",
              "leftValue": "={{ $json.commands }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1300,
        -360
      ],
      "id": "7ac7e9a8-9e90-4a02-9909-befb2ff98aa6",
      "name": "If"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const data = $json;\n\n// Filter out objects where success is false.\nconst filtered = data.filter(item => item.success);\n\n// Map each filtered object to a string. If executionError is not provided, use an empty object as default.\nconst result = filtered\n  .map(item => {\n    const errorString = item.executionError ? JSON.stringify(item.executionError) : \"{}\";\n    return `${item.type}: ${errorString}`;\n  })\n  .join(\", \");\n\nreturn {\n  'response': result\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2020,
        -380
      ],
      "id": "a4a29bf5-fd38-477f-938d-abe3146c2c3d",
      "name": "Convert response to string"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n  'response': 'no change'\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1680,
        -180
      ],
      "id": "e57e67b5-cee6-49ae-80f6-eb70ce84ce82",
      "name": "Set empty response"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const result = $json.upsertedLegalPerson;\nresult['status'] = $json.response;\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2240,
        -60
      ],
      "id": "fb6c2fb4-428a-4e3b-bfc6-78b6a5abb75e",
      "name": "create response"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {
          "fileName": "=processed_{{ $('Form').item.json['File'].filename }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2460,
        -60
      ],
      "id": "88e536bc-7dd4-4a17-aa68-e2171477522e",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "fromEmail": "noreply@hr-group.hu",
        "toEmail": "={{ $('Form').item.json['Email'] }}",
        "subject": "Az Jogi szemelyek feltoltes feldolgozasa elkeszult",
        "emailFormat": "text",
        "text": "A munkafolyamatod sikeresen feldolgozásra került, kérlek, keresd a csatolt a XLSX fájlt az e-mailben, amely tartalmazza az eredmenyeket.",
        "options": {
          "appendAttribution": false,
          "attachments": "=data"
        }
      },
      "id": "d029a163-9109-444d-a4f4-10ef7e71bb19",
      "name": "Send Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        2700,
        -60
      ],
      "webhookId": "53278c6a-2786-49ce-a921-a15589572d82",
      "credentials": {
        "smtp": {
          "id": "nF8jekF8CRIcIClT",
          "name": "Local SMTP account"
        }
      }
    },
    {
      "parameters": {
        "formTitle": "Jogi személyek importálása",
        "formDescription": "Ez az űrlap lehetőséget biztosít jogi személyek adatinak importálására. Kérjük, töltsd fel az xlsx kiterjesztésű fájlt, amely a jogi személyek adatait tartalmazza, a Fájl mezőbe, majd add meg azt az email címet, amelyre a rendszer az importálás eredményét elküldi.\n\nAz importálási folyamat a következő lépéseket tartalmazza:\n\nFájl feltöltése: Az xlsx formátumú fájlban található jogi személyek adatai alapján történik az importálás.\n\nEredmény email: Az importálás befejezése után a rendszer automatikusan küld egy emailt a megadott címre, amely tartalmazza az importálási folyamat eredményét és esetleges hibajelentéseket.\n\nKérjük, győződj meg róla, hogy a feltöltött fájl helyes formátumban van, és a megadott email cím érvényes!",
        "formFields": {
          "values": [
            {
              "fieldLabel": "File",
              "fieldType": "file",
              "multipleFiles": false,
              "acceptFileTypes": "*.xlsx"
            },
            {
              "fieldLabel": "Email",
              "fieldType": "email",
              "requiredField": true
            }
          ]
        },
        "options": {
          "respondWithOptions": {
            "values": {
              "formSubmittedText": "A File feldolgozása megkezdödött"
            }
          }
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -660,
        60
      ],
      "id": "281eb8e0-15f2-46a5-908f-18382164197f",
      "name": "Form",
      "webhookId": "282a6ee7-baf4-4208-816f-895fb5cd0cea"
    }
  ],
  "pinData": {},
  "connections": {
    "Extract from File": {
      "main": [
        [
          {
            "node": "Remove invalid entries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove invalid entries": {
      "main": [
        [
          {
            "node": "Load legal person",
            "type": "main",
            "index": 0
          },
          {
            "node": "UpsertedLegalPerson",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Remove invalid entries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load legal person": {
      "main": [
        [
          {
            "node": "LoadedLegalPerson",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Create commands",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge response with request",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "UpsertedLegalPerson": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LoadedLegalPerson": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Create commands": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send commands to API": {
      "main": [
        [
          {
            "node": "Convert response to string",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Send commands to API",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set empty response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert response to string": {
      "main": [
        [
          {
            "node": "Merge response with request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set empty response": {
      "main": [
        [
          {
            "node": "Merge response with request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge response with request": {
      "main": [
        [
          {
            "node": "create response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create response": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Form": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f2df516f-502e-4b3e-922b-656460c11c0d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92"
  },
  "id": "Etq5mQOEVN0C11SZ",
  "tags": []
}